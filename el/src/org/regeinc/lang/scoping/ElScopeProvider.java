/*
 * generated by Xtext
 */
package org.regeinc.lang.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.regeinc.lang.el.Instance;
import org.regeinc.lang.el.MethodDeclaration;
import org.regeinc.lang.el.Reference;
import org.regeinc.lang.el.Type;
import org.regeinc.lang.util.Finder;

/** 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class ElScopeProvider extends AbstractDeclarativeScopeProvider {
	IScope scope_MethodCall_methodDeclaration(EObject context, EReference eReference){
		List<MethodDeclaration> allMethodDeclaration = new ArrayList<MethodDeclaration>();
		Instance instance = Finder.instance(context);
		
		if(instance !=null){			
			if(instance.getLiteral()!=null){
				
			}else if(instance.getListInstance()!=null){
				
			}else if(instance.getNewInstance()!=null){
				
			}else if(instance.getReference()!=null){
				Reference reference = instance.getReference();
				allMethodDeclaration.addAll(Finder.allMethodDeclaration(reference.getType()));
			}
		}
		IScope iscope = Scopes.scopeFor(allMethodDeclaration);
		return iscope;
	}
	
	IScope scope_MethodCall_reference(EObject context, EReference eReference){
		List<Reference> allReference = new ArrayList<Reference>();
		Instance instance = Finder.instance(context);
		
		if(instance !=null){
			if(instance.getLiteral()!=null){
				
			}else if(instance.getListInstance()!=null){
				
			}else if(instance.getNewInstance()!=null){
				
			}else if(instance.getReference()!=null){
				Reference reference = instance.getReference();
				Type type = reference.getType();
				allReference.addAll(Finder.allLocalVariable(type));
				allReference.addAll(Finder.allParameter(type));
				allReference.addAll(Finder.allAssociation(type, null));
			}
		}
		IScope iscope = Scopes.scopeFor(allReference);
		return iscope;
	}
}
